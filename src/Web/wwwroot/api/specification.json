{
  "x-generator": "NSwag v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "RestTest API",
    "version": "1.0.0"
  },
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticates a user and provides a token.",
        "description": "Use this endpoint for user login. The endpoint expects the user's credentials in the request body.\nOn successful authentication, it returns a token for accessing secured resources.",
        "operationId": "Auth_Login",
        "requestBody": {
          "x-name": "userLoginRequest",
          "description": "The user's login credentials.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns an authentication token if the login is successful."
          }
        }
      }
    },
    "/api/auth/sign-up": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a new user.",
        "description": "Use this endpoint for user registration. It accepts user details in the request body and creates a new user.",
        "operationId": "Auth_SignUp",
        "requestBody": {
          "x-name": "signUpUserRequest",
          "description": "The new user's sign-up details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpCommandRequst"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Indicates successful registration of the user."
          }
        }
      }
    },
    "/api/file/upload": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Uploads a file to the server.",
        "description": "Use this endpoint to upload a file. The file should be included in the request's form data.",
        "operationId": "File_Upload",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Image": {
                    "type": "string",
                    "format": "binary",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates that the file has been successfully uploaded."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/resource-items/get-with-pagination": {
      "get": {
        "tags": [
          "ResourceItems"
        ],
        "summary": "Retrieves a paginated list of resource items.",
        "description": "Use this endpoint to fetch a paginated list of resource items. \nYou can specify pagination parameters in the query.",
        "operationId": "ResourceItems_GetWithPagination",
        "parameters": [
          {
            "name": "Title",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of resource items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfResourceItemDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/resource-items/create": {
      "post": {
        "tags": [
          "ResourceItems"
        ],
        "summary": "Creates a new resource item.",
        "description": "This endpoint is used for creating a new resource item. \nProvide the necessary details in the request body.",
        "operationId": "ResourceItems_Create",
        "requestBody": {
          "x-name": "command",
          "description": "The command to create a new resource item.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceItemCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the ID of the newly created resource item.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/synonym/get-target-synonyms": {
      "get": {
        "tags": [
          "Synonym"
        ],
        "summary": "Retrieves synonyms for a specified word.",
        "description": "This endpoint is used to get a list of synonyms for a given word. \nThe word is provided as a query parameter.\n\nSample request:\n\n    GET /synonym?fromSynonym=A",
        "operationId": "Synonym_GetTargetSynonyms",
        "parameters": [
          {
            "name": "FromSynonym",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of synonyms for the specified word.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetSynonymView"
                }
              }
            }
          }
        }
      }
    },
    "/api/synonym/add-synonym": {
      "post": {
        "tags": [
          "Synonym"
        ],
        "summary": "Adds a new synonym pair to the system.",
        "description": "This endpoint is used to add a new synonym relationship between two words. \nIt requires specifying both words in the synonym relationship.\n\nSample request:\n\n    POST /synonym\n    {\n        \"synonymFrom\": \"A\",\n        \"synonymTo\": \"B\"\n    }",
        "operationId": "Synonym_AddSynonym",
        "requestBody": {
          "x-name": "request",
          "description": "The synonym pair to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewSynonymRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Indicates the synonym pair was successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/api/synonym/save-current-state": {
      "post": {
        "tags": [
          "Synonym"
        ],
        "summary": "Saves the current state of the application.",
        "description": "This endpoint triggers the saving of the current application state. \nIt could involve persisting current configurations, user data, or any other relevant stateful information.\n\nSample request:\n\n    POST /synonym/save-current-state",
        "operationId": "Synonym_SaveCurrentState",
        "responses": {
          "200": {
            "description": "Returns a result object indicating the success or failure of the save operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/api/synonym/load-state": {
      "post": {
        "tags": [
          "Synonym"
        ],
        "summary": "Loads the previously saved state of the application.",
        "description": "This endpoint is used to load a previously saved state of the application. \nIt might involve restoring configurations, user data, or other relevant stateful information \nthat has been persisted earlier.\nSample request:\n\n    POST /synonym/load-state",
        "operationId": "Synonym_LoadState",
        "responses": {
          "200": {
            "description": "Returns a result object indicating the success or failure of the load operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/api/synonym/reset-state": {
      "post": {
        "tags": [
          "Synonym"
        ],
        "summary": "Resets the application state.",
        "description": "Use this endpoint to reset the state of the application. This operation might involve clearing caches, \nresetting session data, or any other stateful components of the application.\n\nWarning: This operation cannot be undone and will result in the loss of the current state.\n\nSample request:\n\n    POST synoynm/reset-state",
        "operationId": "Synonym_ResetState",
        "responses": {
          "200": {
            "description": "Returns the result of the reset operation, indicating success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserLoginRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "SignUpCommandRequst": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userName": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PaginatedListOfResourceItemDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceItemDto"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        }
      },
      "ResourceItemDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "title": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        }
      },
      "CreateResourceItemCommand": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "title",
          "location"
        ],
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "nullable": false
          },
          "location": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "TargetSynonymView": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fromSynonym": {
            "type": "string"
          },
          "synonyms": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Result": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "succeeded": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "AddNewSynonymRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "synonymFrom": {
            "type": "string"
          },
          "synonymTo": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "apiKey",
        "description": "Type into the textbox: Bearer {your JWT token}.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "JWT": []
    }
  ]
}